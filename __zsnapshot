# Used variables: __zsnap_key __zsnap_type __zsnap_opts __zsnap_tmp

#
# "Serialize" parameters
#

# k, t, opts, tmp, tmp2
unset      __zsnap_key __zsnap_type __zsnap_opts __zsnap_tmp __zsnap_tmp2
typeset -g __zsnap_key __zsnap_type __zsnap_opts __zsnap_tmp __zsnap_tmp2

echo "#"
echo "# Variables"
echo "#"

cat <<EOF
builtin setopt noaliases
unset __zsnap_key __zsnap_type
typeset -g __zsnap_key __zsnap_type
for __zsnap_key in "\${(k)parameters[@]}"; do
    __zsnap_type="\${parameters[\$__zsnap_key]}"
    if [[ "\$__zsnap_type" != *-readonly* ]]; then
        unset "\$__zsnap_key"
    fi
done
EOF

echo

for __zsnap_key in "${(k)parameters[@]}"; do
    __zsnap_type="${parameters[$__zsnap_key]}"

    [[ "$__zsnap_key" = "__zsnap_key" || "$__zsnap_key" = "__zsnap_type" || "$__zsnap_key" = "__zsnap_opts" ]] && continue
    [[ "$__zsnap_key" = "__zsnap_tmp" || "$__zsnap_key" = "__zsnap_tmp2" ]] && continue
    [[ "$__zsnap_key" = "0" ]] && continue

    __zsnap_opts="-"
    if [[ "$__zsnap_type" = *-export* ]]; then
        __zsnap_opts+="x"
    fi
    if [[ "$__zsnap_type" = *-hideval* ]]; then
        __zsnap_opts+="H"
    fi
    if [[ "$__zsnap_type" = *-hide-* || "$__zsnap_type" = *-hide ]]; then
        __zsnap_opts+="h"
    fi
    if [[ "$__zsnap_type" = *-readonly* ]]; then
        __zsnap_opts+="r"
    fi
    if [[ "$__zsnap_type" = *-tag* ]]; then
        __zsnap_opts+="__zsnap_type"
    fi
    if [[ "$__zsnap_type" = *-unique* ]]; then
        __zsnap_opts+="U"
    fi
    if [[ "$__zsnap_type" = *-lower* ]]; then
        __zsnap_opts+="l"
    fi
    if [[ "$__zsnap_type" = *-upper* ]]; then
        __zsnap_opts+="u"
    fi
    if [[ "$__zsnap_type" = *-left* ]]; then
        # Check for field width
        __zsnap_tmp=`declare -p ${(q)__zsnap_key}`
        __zsnap_tmp="${__zsnap_tmp##*-L}"
        __zsnap_tmp="${__zsnap_tmp%% *}"
        __zsnap_opts="-L$__zsnap_tmp $__zsnap_opts"
    fi
    if [[ "$__zsnap_type" = *-right_blanks* ]]; then
        # Check for field width
        __zsnap_tmp=`declare -p ${(q)__zsnap_key}`
        __zsnap_tmp="${__zsnap_tmp##*-R}"
        __zsnap_tmp="${__zsnap_tmp%% *}"
        __zsnap_opts="-R$__zsnap_tmp $__zsnap_opts"
    fi
    if [[ "$__zsnap_type" = *-right_zeros* ]]; then
        # Check for field width
        __zsnap_tmp=`declare -p ${(q)__zsnap_key}`
        __zsnap_tmp="${__zsnap_tmp##*-Z}"
        __zsnap_tmp="${__zsnap_tmp%% *}"
        __zsnap_opts="-Z$__zsnap_tmp $__zsnap_opts"
    fi
    if [[ "$__zsnap_type" = *-special* ]]; then
        if [[ "$__zsnap_type" = *-hide-* || "$__zsnap_type" = *-hide || "$__zsnap_type" = *-readonly* ]]; then
            # Skip variables that are hidden or readonly, and special
            continue
        fi
    fi

    __zsnap_opts="${__zsnap_opts%-}"

    if [[ "$__zsnap_type" = "array" || "$__zsnap_type" = array-* ]]; then
        __zsnap_opts="-a $__zsnap_opts"
        print -r -- "declare $__zsnap_opts $__zsnap_key"
        print -r -- "$__zsnap_key=("
        eval "__zsnap_tmp=\${#$__zsnap_key}"
        for (( __zsnap_tmp2=1; __zsnap_tmp2 <= __zsnap_tmp; __zsnap_tmp2 ++ )); do
            eval "print -r -- \"\${(qq)${__zsnap_key}[__zsnap_tmp2]}\""
        done
        print -r -- ")"
    elif [[ "$__zsnap_type" = "association" || "$__zsnap_type" = association-* ]]; then
        __zsnap_opts="-A $__zsnap_opts"
        print -r -- "declare $__zsnap_opts $__zsnap_key"
        eval "print -r -- \"$__zsnap_key=( \${(qqkv)${__zsnap_key}[@]} )\""
    elif [[ "$__zsnap_type" = "scalar" || "$__zsnap_type" = scalar-* ]]; then
        print -r -- "declare $__zsnap_opts $__zsnap_key"
        eval "print -r -- \"$__zsnap_key=\${(qq)$__zsnap_key}\""
    elif [[ "$__zsnap_type" = "integer" || "$__zsnap_type" = integer-* ]]; then
        # Check for base
        __zsnap_tmp=`declare -p ${(q)__zsnap_key}`
        __zsnap_tmp="${__zsnap_tmp##*-i}"
        __zsnap_tmp="${__zsnap_tmp%% *}"
        __zsnap_opts="-i$__zsnap_tmp $__zsnap_opts"
        print -r -- "declare $__zsnap_opts $__zsnap_key"
        eval "print -r -- \"$__zsnap_key=\${$__zsnap_key}\""
    elif [[ "$__zsnap_type" = "float" || "$__zsnap_type" = float-* ]]; then
        __zsnap_tmp=`declare -p ${(q)__zsnap_key}`
        # -E or -F, get the base
        if [ "$__zsnap_tmp" = "${__zsnap_tmp##*-F}" ]; then
            __zsnap_tmp="${__zsnap_tmp##*-E}"
            __zsnap_tmp="${__zsnap_tmp%% *}"
            __zsnap_opts="-E$__zsnap_tmp $__zsnap_opts"
        else
            __zsnap_tmp="${__zsnap_tmp##*-F}"
            __zsnap_tmp="${__zsnap_tmp%% *}"
            __zsnap_opts="-F$__zsnap_tmp $__zsnap_opts"
        fi
        eval "print -r -- \"$__zsnap_key=\${$__zsnap_key}\""
    fi

done

#
# "Serialize" functions
#

echo
echo "#"
echo "# Functions"
echo "#"
echo "unfunction -m \*"
declare -f

#
# Serialize zstyles
#

echo
echo "#"
echo "# Zstyles"
echo "#"
echo "zstyle -d"
zstyle -L

#
# Serialize zle widgets
#
echo
echo "#"
echo "# Zle widgets"
echo "#"

cat <<EOF
unset __zsnap_arr
typeset -ga __zsnap_arr
__zsnap_arr=( "\${(@f)"\$( "zle" "-la" )"}" )
for __zsnap_key in \${__zsnap_arr[@]}; do
    [[ "\${__zsnap_key[1]}" != "." ]] && zle -D "\$__zsnap_key"
done
EOF

zle -lL

echo "builtin setopt aliases"

# vim:ft=zsh
