# Used variables: __zsnap_k t opts tmp

#
# "Serialize" parameters
#

unset __zsnap_k __zsnap_t __zsnap_opts __zsnap_tmp __zsnap_tmp2
typeset -g __zsnap_k __zsnap_t __zsnap_opts __zsnap_tmp __zsnap_tmp2

echo "#"
echo "# Variables"
echo "#"

cat <<EOF
for __zsnap_k in "\${(k)parameters[@]}"; do
    t="\${parameters[\$__zsnap_k]}"
    if [[ "\$t" != *-readonly* ]]; then
        unset "\$__zsnap_k"
    fi
done
EOF

echo

for __zsnap_k in "${(k)parameters[@]}"; do
    t="${parameters[$__zsnap_k]}"

    [[ "$__zsnap_k" = "__zsnap_k" || "$__zsnap_k" = "t" || "$__zsnap_k" = "opts" || "$__zsnap_k" = "tmp" ]] && continue
    [[ "$__zsnap_k" = "0" ]] && continue

    opts="-"
    if [[ "$t" = *-export* ]]; then
        opts+="x"
    fi
    if [[ "$t" = *-hideval* ]]; then
        opts+="H"
    fi
    if [[ "$t" = *-hide-* || "$t" = *-hide ]]; then
        opts+="h"
    fi
    if [[ "$t" = *-readonly* ]]; then
        opts+="r"
    fi
    if [[ "$t" = *-tag* ]]; then
        opts+="t"
    fi
    if [[ "$t" = *-unique* ]]; then
        opts+="U"
    fi
    if [[ "$t" = *-lower* ]]; then
        opts+="l"
    fi
    if [[ "$t" = *-upper* ]]; then
        opts+="u"
    fi
    if [[ "$t" = *-left* ]]; then
        # Check for field width
        tmp=`declare -p ${(q)__zsnap_k}`
        tmp="${tmp##*-L}"
        tmp="${tmp%% *}"
        opts="-L$tmp $opts"
    fi
    if [[ "$t" = *-right_blanks* ]]; then
        # Check for field width
        tmp=`declare -p ${(q)__zsnap_k}`
        tmp="${tmp##*-R}"
        tmp="${tmp%% *}"
        opts="-R$tmp $opts"
    fi
    if [[ "$t" = *-right_zeros* ]]; then
        # Check for field width
        tmp=`declare -p ${(q)__zsnap_k}`
        tmp="${tmp##*-Z}"
        tmp="${tmp%% *}"
        opts="-Z$tmp $opts"
    fi
    if [[ "$t" = *-special* ]]; then
        if [[ "$t" = *-hide-* || "$t" = *-hide || "$t" = *-readonly* ]]; then
            # Skip variables that are hidden or readonly, and special
            continue
        fi
    fi

    opts="${opts%-}"

    if [[ "$t" = "array" || "$t" = array-* ]]; then
        opts="-a $opts"
        echo "declare $opts $__zsnap_k"
        echo "$__zsnap_k=("
        eval "tmp=\${#$__zsnap_k}"
        for (( tmp2=1; tmp2 <= tmp; tmp2 ++ )); do
            eval "echo -E \"\${(qq)${__zsnap_k}[tmp2]}\""
        done
        echo ")"
    elif [[ "$t" = "association" || "$t" = association-* ]]; then
        opts="-A $opts"
        echo "declare $opts $__zsnap_k"
        eval "echo \"$__zsnap_k=( \${(qqkv)${__zsnap_k}[@]} )\""
    elif [[ "$t" = "scalar" || "$t" = scalar-* ]]; then
        echo "declare $opts $__zsnap_k"
        eval "echo \"$__zsnap_k=\${(qq)$__zsnap_k}\""
    elif [[ "$t" = "integer" || "$t" = integer-* ]]; then
        # Check for base
        tmp=`declare -p ${(q)__zsnap_k}`
        tmp="${tmp##*-i}"
        tmp="${tmp%% *}"
        opts="-i$tmp $opts"
        echo "declare $opts $__zsnap_k"
        eval "echo \"$__zsnap_k=\${$__zsnap_k}\""
    elif [[ "$t" = "float" || "$t" = float-* ]]; then
        tmp=`declare -p ${(q)__zsnap_k}`
        # -E or -F, get the base
        if [ "$tmp" = "${tmp##*-F}" ]; then
            tmp="${tmp##*-E}"
            tmp="${tmp%% *}"
            opts="-E$tmp $opts"
        else
            tmp="${tmp##*-F}"
            tmp="${tmp%% *}"
            opts="-F$tmp $opts"
        fi
        eval "echo \"$__zsnap_k=\${$__zsnap_k}\""
    fi

done

#
# "Serialize" functions
#

echo
echo "#"
echo "# Functions"
echo "#"
echo "unfunction -m \*"
declare -f

#
# Serialize zstyles
#

echo
echo "#"
echo "# Zstyles"
echo "#"
echo "zstyle -d"
zstyle -L

# vim:ft=zsh
